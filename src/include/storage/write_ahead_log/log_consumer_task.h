#pragma once

#include <utility>
#include <vector>
#include "common/container/concurrent_blocking_queue.h"
#include "common/dedicated_thread_registry.h"
#include "storage/storage_defs.h"
#include "storage/write_ahead_log/log_io.h"

namespace terrier::storage {

/**
 * Base log consumer task. A log consumer consumes logs generated by the log serializer task.
 */
class LogConsumerTask : public common::DedicatedThreadTask {
 protected:
  /**
   * Base LogConsumerTask
   * @param empty_buffer_queue pointer to queue to push empty buffers to
   * @param filled_buffer_queue pointer to queue to pop filled buffers from
   */
  explicit LogConsumerTask(common::ConcurrentBlockingQueue<BufferedLogWriter *> *empty_buffer_queue,
                               common::ConcurrentQueue<storage::SerializedLogs> *filled_buffer_queue)
      : run_task_(false),
        empty_buffer_queue_(empty_buffer_queue),
        filled_buffer_queue_(filled_buffer_queue) {}

  friend class LogManager;
  // Flag to signal task to run or stop
  bool run_task_;

  // The queue containing empty buffers. Task will enqueue a buffer into this queue when it has consumed its logs
  common::ConcurrentBlockingQueue<BufferedLogWriter *> *empty_buffer_queue_;
  // The queue containing filled buffers. Task should dequeue filled buffers from this queue to flush
  common::ConcurrentQueue<SerializedLogs> *filled_buffer_queue_;
};
}  // namespace terrier::storage
